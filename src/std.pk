/* std.pk - Standard definitions for poke.  */

/* Copyright (C) 2019 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* XXX: use the std:: namespace for all the definitions in this file.  */

/* Standard integral types.  */
/* XXX: these types should be immutable.  */

deftype bit = uint<1>;
deftype nibble = uint<4>;

deftype uint8 = uint<8>;
deftype uint16 = uint<16>;
deftype uint32 = uint<32>;
deftype uint64 = uint<64>;

deftype int8 = int<8>;
deftype int16 = int<16>;
deftype int32 = int<32>;
deftype int64 = int<64>;

deftype uint = uint32;
deftype int = int32;
deftype char = uint8;
deftype byte = uint8;
deftype ushort = uint16;
deftype short = int16;
deftype ulong = uint64;
deftype long = int64;

deftype off64 = offset<int64,b>;

/* String related routines.  */

defun substr = (string s, int f, int t = s'length - 1) string:
  {
   return s[f..t];
  }

defun strstr = (string s1, string s2) long:
  {
   defvar i = 0UL;

   if (s1'length == 0)
     return 0;
   if (s1'length > s2'length)
     return -1;
   
   while (i < s2'length - s1'length + 1)
     {
       if (s2[i..i + s1'length - 1] == s1)
         return i;

       i = i + 1;
     }

   return -1;
  }

defun format = (string fmt, args...) string:
  {
   defvar fi = 0;
   defvar res = "";
   defvar narg = 0;
   
   defun tohex = (uint<64> n) string:
   {
    defvar hex = "";

    while (n != 0)
      {
        defvar remainder = (n % 16) as char;

        if (remainder < 10)
          hex = (remainder + '0') as string + hex;
        else
          hex = (remainder + '7') as string + hex;

        n = n / 16;
      }

    return hex;
   }

   defun tooct = (uint<64> n) string:
   {
    return "012";
   }

   defun tobin = (uint<64> n) string:
   {
    return "100";
   }

   defun todec = (int<64> n) string:
   {
    return "10";
   }

   defun toudec = (uint<64> n) string:
   {
    return "-10";
   }

   while (fi < fmt'length)
     {
       if (fmt[fi] == '%'
           && fi < fmt'length - 1)
         {
           /* Process %-sequence:
              
              %{i,u}BITS{x,o,b,d,u}  */

           if (fmt[fi + 1] == 'x')
             res = res + tohex (args[narg] as uint<64>);
           else if (fmt[fi + 1] == 'o')
             res = res + tooct (args[narg] as uint<64>);
           else if (fmt[fi + 1] == 'b')
             res = res + tobin (args[narg] as uint<64>);
           else if (fmt[fi + 1] == 'd')
             res = res + todec (args[narg] as int<64>);
           else if (fmt[fi + 1] == 'u')
             res = res + toudec (args[narg] as uint<64>);
           else
             {
               print "format: unrecognized %" + fmt[fi + 1] as string + "\n";
               raise E_generic; /* XXX use E_inval ? */
             }

           narg = narg + 1;
           fi = fi + 2;
         }
       else
         {
          res = res + fmt[fi] as string;
          fi = fi + 1;
         }
     }

   return res;
  }

/* Quicksort.  */

deftype Comparator = (any,any)int;

defun CmpInt = (any a, any b) int:
  {
   defvar ai = a as int;
   defvar bi = b as int;

   if (ai == bi)
     return 0;
   else if (ai < bi)
     return -1;
   else
     return 1;
  }

defun qsort = (any[] array, Comparator cmp_f,
               long left = 0, long right = array'length - 1) void:
  {
   defun swap = (long i1, long i2) void:
   {
    defvar t = array[i1];
    array[i1] = array[i2];
    array[i2] = t;
   }

   defun partition = int:
   {
    defvar pivot = array[right];
    defvar i = left - 1;
    
    defvar j = left;
    while (j <= right - 1)
      {
        if (cmp_f (array[j], pivot) <= 0)
          {
            i = i + 1;
            swap (i, j);
          }

        j = j + 1;
      }

    swap (i + 1, right);
    return i + 1;
   }

   if (left < right)
     {
      defvar pi = partition;
      
      qsort (array, cmp_f, left, pi - 1);
      qsort (array, cmp_f, pi + 1, right);
     }
  }
