/* pk-dump.pk - `dump' command.  */

/* Copyright (C) 2019 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

pk_help_str = pk_help_str
  + "\ndump\t\tDisplay the contents of an IO range.";

/* The operation of `dump' can be configured by the user by
   customizing the following variables.  */

defvar pk_dump_size = 128#B;
defvar pk_dump_group_by = 2#B;
defvar pk_dump_rule = 0;
defvar pk_dump_ascii = 0;

/* `pk_dump_offset' keeps the last base offset used by `dump'.  It is
   the offset to be used in case the command is invoked with no :from
   argument.  */

defvar pk_dump_offset = 0#B; /* This gets updated by `dump'.  */

/* And the command itself.  */

defun dump = (off64 from = pk_dump_offset,
              off64 size = pk_dump_size,
              off64 group_by = pk_dump_group_by,
              int rule = pk_dump_rule,
              int ascii = pk_dump_ascii) void:
  {
   defvar step = 16#B;

   /* The `dump' command is byte-oriented.  Both the base offset and
      the size of the dump are truncated to bytes.  Hence the casts
      below.  */
   defvar offset = from as offset<uint<64>,B>;
   defvar top = (from + size) as offset<uint<64>,B>;

   if (rule)
     {
       /* XXX honor use group_by  */
       print "87654321  0011 2233 4455 6677 8899 aabb ccdd eeff";
       if (ascii)
         print "  0123456789ABCDEF";
       print "\n";
     }

   /* Iterate and print lines with the bytes of each step, grouping
      them as indicated by group_by.  The output is truncated in case
      an EOF occurs.  */
   try
     while (offset < top)
       {
         printf ("%u32x:", offset / #B);

         defvar o = offset;
         while (o < offset + step)
           {
             if ((o - offset) % group_by == 0#B)
               print " ";
             printf ("%u8x", int<8> @ o);
             o = o + 1#B;
           }
         print "\n";
         
         offset = offset + step;
       }
   catch if E_eof { print "\n"; }

   pk_dump_offset = from;
  }
