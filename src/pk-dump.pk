/* pk-dump.pk - `dump' command.  */

/* Copyright (C) 2019 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* XXX Register the help text of this command.  */

pk_help_str = pk_help_str
  + "\ndump\t\tDisplay the contents of an IO range.";

defvar pk_cmd_dump_usage = "Usage: dump :from OFFSET [:size OFFSET] [:to OFFSET]";
defvar pk_dump_offset = 0#B;

defun dump = (off64 from = pk_dump_offset,
              off64 size = 16#B,
              int rule = 0,
              int ascii = 0) void:
  {
   defvar offset = (from / #B) #B;
   defvar top = ((from + size) / #B) #B;
   defvar step = 16#B;

   if (rule)
     {
       print "87654321  0011 2233 4455 6677 8899 aabb ccdd eeff";
       if (ascii)
         print "  0123456789ABCDEF";
       print "\n";
     }

   try
     while (offset < top)
       {
         printf "%u32x: ", offset / #B;

         defvar o = offset;
         while (o < offset + step)
           {
             printf "%u8x", int<8> @ o;
             if ((o'magnitude - offset'magnitude) % 2)
               print " ";
             o = o + 1#B;
           }
         print "\n";
         
         offset = offset + step;
       }
   catch if E_eof
   {
       print "\n";
   }

   pk_dump_offset = from;
  }
