/* pk-dump.pk - `dump' command.  */

/* Copyright (C) 2019 Jose E. Marchesi */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* XXX colorize  */

pk_help_str = pk_help_str
  + "\ndump\t\tDisplay the contents of an IO range.";

/* The operation of `dump' can be configured by the user by
   customizing the following variables.  */

defvar pk_dump_size = 128#B;
defvar pk_dump_group_by = 2#B;
defvar pk_dump_ruler = 1;
defvar pk_dump_ascii = 1;

/* `pk_dump_offset' keeps the last base offset used by `dump'.  It is
   the offset to be used in case the command is invoked with no :from
   argument.  */

defvar pk_dump_offset = 0#B;

/* And the command itself.  */

defun dump = (off64 from = pk_dump_offset,
              off64 size = pk_dump_size,
              off64 group_by = pk_dump_group_by,
              int ruler = pk_dump_ruler,
              int ascii = pk_dump_ascii) void:
  {
   defun print_ruler = void:
     {
      defvar o = 0#B;

      print "76543210 ";
      for (s in ["00", "11", "22", "33", "44", "55", "66",
                 "77", "88", "99", "aa", "bb", "cc", "dd",
                 "ee", "ff"])
        {
          if (o % group_by == 0#B)
            print " ";
          print s;
          o = o + 1#B;
        }
       if (ascii)
         print "  0123456789ABCDEF";
       print "\n";
     }

   defun print_data = (off64 offset, off64 top, off64 step) void:
     {
      while (offset < top)
        {
         printf ("%u32x:", offset / #B);

         defvar o = 0#B;
         while (o < step && offset + o < top)
           {
             if (o % group_by == 0#B)
               print " ";
             printf ("%u8x", int<8> @ (offset + o));
             o = o + 1#B;
           }
         if (ascii)
	   {
	     print("  ");
	     o = 0#B;
	     while (o < step && offset + o < top)
	       {
	         defvar v = int<8> @ (offset + o);
	         if (v < ' ' || v > '~')
	           print(".");
	         else
	           printf ("%c", v);
	         o = o + 1#B;
	       }
	   }
         print "\n";

         offset = offset + step;
       }
     }

   /* The `dump' command is byte-oriented.  Both the base offset and
      the size of the dump are truncated to bytes.  Hence the casts
      below.  */
   defvar offset = from as offset<uint<64>,B>;
   defvar top = (from + size) as offset<uint<64>,B>;

   if (ruler)
     print_ruler;

   try print_data :offset offset :top top :step 16#B;
   catch if E_eof { print "\n"; }

   pk_dump_offset = from;
  }
