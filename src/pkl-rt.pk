/* pkl-rt.pkl - Run-time library for the poke compiler.  */

/* Copyright (C) 2019 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* Please note, in this file:

   - No standard types.
   - Use a `_pkl_' prefix for every declaration that is not defining
     a compiler-builtin wrapper.
   - No array or struct operators, only simple values please.
   - Compiler __builtins__ can be used in this file.

   You break it, you fix it.  */

/* XXX: every declaration here should be immutable.  */

/* Compiler built-ins.  */

defun print = (string str) void: __builtin_print__;

/* Exceptions.

   XXX: use an enumeration?

   User-defined exceptions start with 255.  */

deftype Exception = int<32>;

defvar E_generic       = 0;
defvar E_div_by_zero   = 1;
defvar E_no_ios        = 2;
defvar E_no_return     = 3;
defvar E_out_of_bounds = 4;
defvar E_map_bounds    = 5;
defvar E_eof           = 6;

/* Default exception handler.

   Note that the code in this function should NOT raise any exception,
   or be ready to underflow the exception handlers stack and face some
   ugly shit.  You have been warned!  */

defun _pkl_exception_handler = (Exception exception) void:
  {
   print ("unhandled ");

   /* XXX: use a multiple conditional statement here.  */
   if (exception == E_out_of_bounds)
     print ("out of bounds");
   else if (exception == E_eof)
     print ("EOF");
   else if (exception == E_map_bounds)
     print ("out of map bounds");
   else if (exception == E_div_by_zero)
     print ("division by zero");
   else if (exception == E_no_ios)
     print ("no IOS");
   else if (exception == E_no_return)
     print ("no return");
   else
     print ("generic");

   print (" exception\n");
  }

/* Find the greatest common divisor of two unsigned 64-bit integrals A
   and B using the Euclidean algorithm.  */

defun _pkl_gcd = (uint<64> a, uint<64> b) uint<64>:
  {
   if (b == 0)
     return a;
   else
     return _pkl_gcd (b, a % b);
  }

/* XXX Array to string.
   Struct to string.  */
/* XXX error reporting routine, called by the macro pkl_asm_rterror().
   This should exit the vm with the exitvm instruction.  */
