#!/usr/bin/awk -f

# ras - The Retarded Poke Assembler
#
# Copyright (C) 2019 Jose E. Marchesi
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This is a dumb assembler that can translate Poke Assembly code into
# C macros.  The resulting C macros are designed to be used in the PKL
# code generator.

### Documentation

# Macros and Functions
#
#  .macro NAME
#  ...
#  .end
#
# Translates to RAS_MACRO_NAME
#
#  .function NAME
#  ...
#  .end
#
# Translates to RAS_FUNCTION_NAME(CLOSURE)

BEGIN {
    current_entity = ""
}

### Rules for assembler directives

# .c RESTOFLINE
/\.c.*$/ {
    # XXX: should print the rest of the line
    print $2 "\\"
}

# .macro NAME
/\.macro/ {
    print "#define RAS_MACRO_" toupper($2) "(CLOSURE)  \\"
    print "do() { \\"

    current_entity = "macro"
}

# .function NAME
/\.function/ {
    print "#define RAS_FUNCTION_" toupper($2) "(CLOSURE)  \\"
    print "do() { \\"

    current_entity = "function"
}

# .endfunction
/\.end/ {
    if (current_entity == "function")
    {
        print "PKL_GEN_POP_ASM; \\"
        print "pvm_specialize_program (program); \\"
        print "(CLOSURE) = pvm_make_cls (program); \\"
    }
    print "} while (0)"
}

# .local VARNAME
/\.local/ {
    # XXX
    print "regvar \\"
}

# Process an instruction

/^[ \t]*[a-zA-Z][a-zA-Z]+/ {

    # int<N>M -> pvm_make_int (M, N)
    # uint<N>M -> pvm_make_uint (M, N)

    # literal -> if variable: back,over

    # null -> PVM_NULL
    $0 = gensub (/null/, "PVM_NULL", "g", $0)
    # "..." -> pvm_make_string ("...")
    $0 = gensub (/("[^"]*")/, "pvm_make_string (\\1)", "g", $0);
                 

    insn = $1;
    print $0
}
