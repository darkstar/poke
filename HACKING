Hello there!  This file contains useful information to hack GNU poke.

The Source Tree
===============

Poke Compiler
-------------

Support for abstract syntax trees:

- src/pkl-ast.c
- src/pkl-ast.h
- src/pkl-ops.def
- src/pkl-types.def

Compiler driver:

- src/pkl.h
- src/pkl.c
- src/pkl-pass.c
- src/pkl-pass.h

Lexer and parser:

- src/pkl-lex.l
- src/pkl-tab.y
- src/pkl-parser.c
- src/pkl-parser.h

Analysis phases:

- src/pkl-anal.c
- src/pkl-anal.h

Transformation phases:

- src/pkl-trans.c
- src/pkl-trans.h

Typify phases:

- src/pkl-typify.c
- src/pkl-typify.h

Constant folding phase:

- src/pkl-fold.c
- src/pkl-fold.h

Code generator:
  
- src/pkl-gen.c
- src/pkl-gen.h

Operands promotion phase:

- src/pkl-promo.c
- src/pkl-promo.h

Poke Virtual Machine
--------------------

Virtual machine driver:

- src/pvm.c
- src/pvm.h

Virtual machine instructions:

- src/pvm.jitter

Poke Utility
------------

Main program:

- src/poke.h
- src/poke.c

IO handling:

- src/pk-io.c
- src/pk-io.h

Terminal handling:

- src/pk-term.h

Support for poke commands:

- src/pk-cmd.c
- src/pk-cmd.h

Commands:

- src/pk-dump.c
- src/pk-file.c
- src/pk-help.c
- src/pk-info.c
- src/pk-misc.c
- src/pk-peek.c
- src/pk-poke.c
- src/pk-print.c
- src/pk-vm.c

Test Suite
----------

Target-specific dejagnu configuration:

- testsuite/config/default.exp
- testsuite/config/unix.exp

Utilities to be used in poke tests:

- testsuite/lib/poke.exp

Compiler testsuite:

- poke.pkl/pkl.exp

The bison parser in pkl-tab.y
=============================

The only purpose of the bison parser in pkl-tab.y is to do the
syntactic analysis, build the first AST, and set the locations of the
AST nodes.  Nothing else.  As we shall see below, any further analysis
and transformations on the AST are performaed by the compiler phases,
which are implemented elsewhere.

Compiler Passes and Phases
==========================

These are the phases currently implemented in the poke compiler (the
phases marked with a * are optional):

    [parser]
    trans1     Transformation phase 1.
    anal1      Analysis phase 1.
    typify1    Type analysis and transformation 1.
    promo      Operand promotion phase.
    trans2     Transformation phase 2.
  * fold       Constant folding.
    typify2    Type analysis and transformation 2.
    trans3     Transformation phase 3.
    anal2      Analysis phase 2.
    analf      Analysis final phase.
    gen        Code generation.

The phases above are organized in two passes:

    Pass1: trans1 anal1 typify1 promo trans2 fold typify2 trans3 anal2
    Pass2: analf gen
