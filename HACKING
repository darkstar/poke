Hello there, poker!
This file contains useful information to hack GNU poke.

The Source Tree
===============

Poke Compiler
-------------

Support for abstract syntax trees:

- src/pkl-ast.c
- src/pkl-ast.h
- src/pkl-ops.def
- src/pkl-types.def

Compiler driver:

- src/pkl.h
- src/pkl.c
- src/pkl-pass.c
- src/pkl-pass.h

Lexer and parser:

- src/pkl-lex.l
- src/pkl-tab.y
- src/pkl-parser.c
- src/pkl-parser.h

Analysis phases:

- src/pkl-anal.c
- src/pkl-anal.h

Transformation phases:

- src/pkl-trans.c
- src/pkl-trans.h

Typify phases:

- src/pkl-typify.c
- src/pkl-typify.h

Constant folding phase:

- src/pkl-fold.c
- src/pkl-fold.h

Code generator:
  
- src/pkl-gen.c
- src/pkl-gen.h

Operands promotion phase:

- src/pkl-promo.c
- src/pkl-promo.h

Macro-assembler:

- src/pkl-asm.c
- src/pkl-asm.h
- src/pkl-insn.def

Run-time library:

- pickles/pkl.pk

Poke Virtual Machine
--------------------

Virtual machine driver:

- src/pvm.c
- src/pvm.h

Virtual machine values:

- src/pvm-val.c
- src/pvm-val.h

Run-time environment:

- src/pvm-env.c
- src/pvm-env.h

Virtual machine instructions:

- src/pvm.jitter

Poke Utility
------------

Main program:

- src/poke.h
- src/poke.c

IO handling:

- src/pk-io.c
- src/pk-io.h

Terminal handling:

- src/pk-term.h

Support for poke commands:

- src/pk-cmd.c
- src/pk-cmd.h

Commands:

- src/pk-dump.c
- src/pk-file.c
- src/pk-help.c
- src/pk-info.c
- src/pk-misc.c
- src/pk-peek.c
- src/pk-poke.c
- src/pk-print.c
- src/pk-def.c
- src/pk-vm.c

Poke Environment
----------------

- pickles/std.pk

  Poke standard library.

Test Suite
----------

Target-specific dejagnu configuration:

- testsuite/config/default.exp
- testsuite/config/unix.exp

Utilities to be used in poke tests:

- testsuite/lib/poke.exp
- testsuite/lib/poke-dg.exp

Compiler testsuite:

- poke.pkl/pkl.exp
- poke.pkl/*.pk

XXX: explain the DG infrastructure and how it is used.

Other Stuff
-----------

GDB extensions to debug poke:

- etc/poke-gdb.scm

Use valgrind in poke in a saner way with the:

- etc/boehm-gc.suppressions

The Poke Compiler
=================

Compiler Overview
-----------------

            /--------\
            | source |
            \---+----/
                |
                v
        +-----------------+
        |      Parser     |
        +-----------------+
        |  analysis and   |
        | transformation  |
        |     phases      |
        +-----------------+    
        | code generation |
        |      phase      |
        +-----------------+
        | Macro assembler |
        +-----------------+
                |
                v
           /---------\
           | program |
           \---------/

The bison parser in pkl-tab.y
-----------------------------

The only purpose of the bison parser in pkl-tab.y is to do the
syntactic analysis, build the initial AST, and set the locations of
the AST nodes.

Unfortunately, currently it also does some extra work, due to
limitations in the LARL parser:

- It builds the compile-time environment and register type, variable
  and function declarations.
- It annotates variables with their lexical addresses.
- It links return statements with their containing functions.
- It annotates return statements with he number of lexical frames
  they should pop before exitting the function.

As we shall see below, any further analysis and transformations on the
AST are performed by the compiler phases, which are implemented
elsewhere.  This helps a lot to keep the parser code clean and easy to
read, and also eases changing the syntactic structure of poke
programs.

Compiler Passes and Phases
--------------------------

These are the phases currently implemented in the poke compiler (the
phases marked with a * are optional):

    [parser]
    --- Front-end pass
    trans1     Transformation phase 1.
    anal1      Analysis phase 1.
    typify1    Type analysis and transformation 1.
    promo      Operand promotion phase.
    trans2     Transformation phase 2.
  * fold       Constant folding.
    typify2    Type analysis and transformation 2.
    trans3     Transformation phase 3.
    anal2      Analysis phase 2.
    --- Middle-end pass
    trans4     Transformation phase 4.
    --- Back-end pass
    analf      Analysis final phase.
    gen        Code generation.

The phases above are organized in two passes:

    Pass1: trans1 anal1 typify1 promo trans2 fold typify2 trans3 anal2
    Pass2: trans4
    Pass3: analf gen

The following subsections contain a brief but complete description of
the tasks performed by each phase.  Please keep it up to date.

trans1
------

- Finishes strings by expanding \-sequences, emitting diagnostics if
  an invalid \-sequence is found.

anal1
-----

- Checks that every return statement is linked to a function.
- Checks that no return statement is linked to a void function.

typify1
-------

- Checks that the expression in which a funcall is applied is a
  function, and that the types of the formal parameters mach the types
  of the funcall arguments.
- Checks that void functions are not called in contexts where a value
  is expected.

typify2
-------

- Checks that the type of the expression in a return statement matches
  the return type of its containing function.

trans4
------

- Reverse the list of actual arguments in function calls, so the code
  generator tackles them in the right (reversed) order, as it is
  expected by the callee.

Debugging Poke
==============

Building with Debugging support
-------------------------------

Configure the sources with --enable-debug.

This will:
1. Use a threaded jitter dispatching model.
2. Build the sources with -O0 -g3.

Using GDB extensions
--------------------

In order to use the GDB pretty-printers and other goodies brought to
you courtesy of the poke hackers, just source the poke-gdb.scm file
from your debugger:

(gdb) source etc/poke-gdb.scm

Valgrind and Poke
-----------------

The PVM uses the Boehm conservative garbage collector in order to
manage the memory used by the VM values.  Other parts of poke, such as
the PKL compiler, manage their own memory.

Valgrind gets easily confused by the GCs tampering with the stack, and
emits a lot of spurious warnings.  Fortunately it is possible to tell
memcheck to omit these warnings: the file etc/boehm-gc.suppresions
contains a list of suppresions.

Invoke valgrind with --suppressions=etc/boehm-gc.suppressions

If despite using the suppressions file you see some spurious warning,
please use:

$ valgrind --tool=memcheck --gen-suppressions=all --log-file=raw.log

Then process raw.log with the etc/parse-valgrind-suppressions.sh
script, wilcard the result as much as you can, and append the results
to etc/boehm-gc.suppressions.
