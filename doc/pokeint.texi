\input texinfo
@comment %**start of header
@setfilename pokeint.info
@include version-int.texi
@settitle Poke Internals
@afourpaper
@comment %**end of header

@copying
This document describes the internals of GNU poke (version
@value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2018 Jose E. Marchesi

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
copy of the license is included in the section entitled ``GNU Free
Documentation License''.
@end quotation
@end copying

@dircategory Editors
@direntry
* pokeint: (pokeint).  Poke Internals.
@end direntry

@titlepage
@title Poke Internals
@subtitle for version @value{VERSION}, @value{UPDATED}
@author by Jose E. Marchesi
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Poke Internals

@insertcopying
@end ifnottex

@menu
* The Source Tree::
* Poke Architecture::
* The PKL Compiler::
* Debugging Poke::

* GNU Free Documentation License:: Distribution terms for this document.

Indexes
* Concept Index::
@end menu

@node The Source Tree
@chapter The Source Tree

@section PKL Compiler

@table @file
@item src/pkl-ast.c
@itemx src/pkl-ast.h
@itemx src/pkl-ops.def
@itemx src/pkl-types.def

Support for abstract syntax trees.

@item src/pkl.h
@itemx src/pkl.c
@itemx src/pkl-pass.c
@itemx src/pkl-pass.h

Compiler driver.

@item src/pkl-lex.l
@itemx src/pkl-tab.y
@itemx src/pkl-parser.c
@itemx src/pkl-parser.h

Lexer and parser.

@item src/pkl-anal.c
@itemx src/pkl-anal.h

Analysis phases.

@item src/pkl-trans.c
@itemx src/pkl-trans.h

Transformation phases.

@item src/pkl-typify.c
@itemx src/pkl-typify.h

Type system phases.

@item src/pkl-fold.c
@itemx src/pkl-fold.h

Constant folding phase.

@item src/pkl-promo.c
@itemx src/pkl-promo.h

Operands promotion phase.

@item src/pkl-gen.c
@itemx src/pkl-gen.h

Code generator.

@item src/pkl-asm.c
@itemx src/pkl-asm.h
@itemx src/pkl-insn.def

Macro-assembler.

@item pk/pkl.pk

Run-time library.
@end table

@section Poke Virtual Machine

@table @file
@item src/pvm.c
@itemx src/pvm.h

Virtual machine driver.

@item src/pvm-val.c
@itemx src/pvm-val.h

Virtual machine values.

@item src/pvm-env.c
@itemx src/pvm-env.h

Run-time environment.

@item src/pvm.jitter

Virtual machine instructions.
@end table

@section Poke Utility

@table @file
@item src/poke.h
@itemx src/poke.c

Main program.

@item src/pk-io.c
@item src/pk-io.h

IO handling.

@item src/ok-term.h

Terminal handling.

@item src/pk-cmd.c
@itemx src/pk-cmd.h

Infrastructure for writing poke commands.

@item src/pk-dump.c
@itemx src/pk-file.c
@itemx src/pk-help.c
@itemx src/pk-info.c
@itemx src/pk-misc.c
@itemx src/pk-peek.c
@itemx src/pk-poke.c
@itemx src/pk-print.c
@itemx src/pk-def.c
@itemx src/pk-vm.c

Commands.
@end table

@section PKL libraries

@table @file
@item pk/std.pk

PKL standard library.
@end table

@section Test Suite

@table @file
@item testsuite/config/default.exp
@itemx testsuite/config/unix.exp

Target-specific dejagnu configuration.

@item testsuite/lib/poke.exp
@itemx testsuite/lib/poke-dg.exp

Poke test drivers.

@item poke.pkl/pkl.exp
@itemx poke.pkl/*.pk

PKL compiler test suite.
@end table

@section Documentation

@table @file
@item doc/poke.texi

The Poke book.

@item doc/pokeint.texi

The Poke Internals manual.  This very document.

@item doc/pkl-spec.texi

The PKL Specification.
@end table

@section Other Stuff

@table @file
@item etc/poke-gdb.scm

GDB extensions to debug poke.

@item etc/boehm-gc.suppressions

Suppression list for making using memcheck with poke a sane
experience.
@end table

@node Poke Architecture
@chapter Poke Architecture

@verbatim

      +----------+
      | compiler |      
      +----------+      +------+
           |            |      |
           v            |      |
      +----------+      |      |
      |   PVM    | <--->|  IO  |
      +----------+      |      |
           ^            |      |
           |            |      |
           v            +------+
      +----------+
      | command  |
      +----------+

@end verbatim

@node The PKL Compiler
@chapter The PKL Compiler

@section Compiler Overview

@verbatim

            /--------\
            | source |
            \---+----/
                |
                v
        +-----------------+
        |      Parser     |
        +-----------------+
        |  analysis and   |
        | transformation  |
        |     phases      |
        +-----------------+    
        | code generation |
        |      phase      |
        +-----------------+
        | Macro assembler |
        +-----------------+
                |
                v
           /---------\
           | program |
           \---------/
@end verbatim

@section The bison Parser in @file{pkl-tab.y}

The only purpose of the bison parser in pkl-tab.y is to do the
syntactic analysis, build the initial AST, and set the locations of
the AST nodes.

Unfortunately, currently it also does some extra work, due to
limitations in the LARL parser:

@itemize
@item
It builds the compile-time environment and register type, variable and
function declarations.
@item
It annotates variables with their lexical addresses.
@item
It links return statements with their containing functions.
@item
It annotates return statements with he number of lexical frames they
should pop before exitting the function.
@end itemize

As we shall see below, any further analysis and transformations on the
@acronym{AST, Abstract Syntax Tree} are performed by the compiler
phases, which are implemented elsewhere.  This helps a lot to keep the
parser code clean and easy to read, and also eases changing the
syntactic structure of poke programs.

@section Compiler Passes and Phases

These are the phases currently implemented in the poke compiler (the
phases marked with a * are optional):

@verbatim
    [parser]
    --- Front-end pass
    trans1     Transformation phase 1.
    anal1      Analysis phase 1.
    typify1    Type analysis and transformation 1.
    promo      Operand promotion phase.
    trans2     Transformation phase 2.
  * fold       Constant folding.
    typify2    Type analysis and transformation 2.
    trans3     Transformation phase 3.
    anal2      Analysis phase 2.
    --- Middle-end pass
    trans4     Transformation phase 4.
    --- Back-end pass
    analf      Analysis final phase.
    gen        Code generation.
@end verbatim

@noindent
The phases above are organized in two passes:

@table @emph
@item Pass1
trans1 anal1 typify1 promo trans2 fold typify2 trans3 anal2
@item Pass2
trans4
@item Pass3
analf gen
@end table

The following sections contain a brief but complete description of the
tasks performed by each phase.  Please keep it up to date.

@section trans1

@itemize
@item
Finishes strings by expanding \-sequences, emitting diagnostics if an
invalid \-sequence is found.
@end itemize

@section anal1

@itemize
@item
Checks that every return statement is linked to a function.
@item
Checks that no return statement is linked to a void function.
@end itemize

@section typify1

@itemize
@item
Checks that the expression in which a funcall is applied is a
function, and that the types of the formal parameters mach the types
of the funcall arguments.
@item
Checks that void functions are not called in contexts where a value is
expected.
@end itemize

@section typify2

@itemize
@item
Checks that the type of the expression in a return statement matches
the return type of its containing function.
@end itemize

@section trans4

@itemize
@item
Reverse the list of actual arguments in function calls, so the code
generator tackles them in the right (reversed) order, as it is
expected by the callee.
@end itemize

@node Debugging Poke
@chapter Debugging Poke

@section Building with Debugging support

Configure the sources with @option{--enable-debug}.  This will:

@enumerate
@item
Use a threaded jitter dispatching model.

@item
Build the sources with @option{-O0 -g3}.
@end enumerate

@section Using GDB extensions

In order to use the GDB pretty-printers and other goodies brought to
you courtesy of the poke hackers, just source the poke-gdb.scm file
from your debugger:

@example
(gdb) source etc/poke-gdb.scm
@end example

@section Valgrind and Poke

The @acronym{PVM, Poke Virtual Machine} uses the Boehm conservative
garbage collector in order to manage the memory used by the VM values.
Other parts of poke, such as the PKL compiler, manage their own
memory.

Valgrind gets easily confused by the GCs tampering with the stack, and
emits a lot of spurious warnings.  Fortunately it is possible to tell
memcheck to omit these warnings: the file
@file{etc/boehm-gc.suppresions} contains a list of suppresions.

Invoke valgrind with @option{--suppressions=etc/boehm-gc.suppressions}

If despite using the suppressions file you see some spurious warning,
please use:

@example
$ valgrind --tool=memcheck --gen-suppressions=all --log-file=raw.log
@end example

@noindent
Then process raw.log with the
@file{etc/parse-valgrind-suppressions.sh} script, wilcard the result
as much as you can, and append the results to
@file{etc/boehm-gc.suppressions}.

@node GNU Free Documentation License
@appendix GNU Free Documentation License
@cindex license, GNU Free Documentation License

@include fdl.texi


@node Concept Index
@unnumbered Concept Index

@printindex cp

@bye
