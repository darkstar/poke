/* { dg-do run } */

defun foo = (long l) long: { return l; }

/* { dg-command { print foo (10L) } } */
/* { dg-output "10L" } */

/* Coercion from int.  */
/* { dg-command { print foo (10) } } */
/* { dg-output "\n10L" } */

/* Coercion from uint.  */
/* { dg-command { print foo (10U) } } */
/* { dg-output "\n10L" } */

/* Coercion from small int.  */
/* { dg-command { print foo (2 as uint<3>) } } */
/* { dg-output "\n2L" } */

defun bar = (offset<uint,B> o) offset<uint,B>: { return o; }

/* Coercion from offset with different base type and unit. */
/* { dg-command { print bar (32#b) } } */
/* { dg-output "\n4U#B" } */

defun baz = (int i) long: { return i; }

/* Coercion of integral return value.  */
/* { dg-command { print baz (10U) } } */
/* { dg-output "\n10L" } */

defun quux = (offset<uint,B> o) offset<long,b>: { return o; }

/* Coercion of offset return value.  */
/* { dg-command { print quux ((2 as uint<3>)#B) } } */
/* { dg-output "\n16L#b" } */

defun myprint = (string str1, string str2) void: { print (str1); print (str2); }

/* { dg-command { : myprint :str1 "foo" :str2 "bar\n"; } } */
/* { dg-output "\nfoobar" } */

/* { dg-command { : myprint :str2 "bar\n" :str1 "foo"; } } */
/* { dg-output "\nfoobar" } */



