/* { dg-do run } */

/* { dg-command {  [0,1,2] } } */
/* { dg-output "\\\[0,1,2\\\]" } */

/* { dg-command {  [0,1,2][1] } } */
/* { dg-output "\n1" } */

/* { dg-command {  [struct {foo=10}] } } */
/* { dg-output "\n\\\[struct \\{foo=10\\}\\\]" } */

/* { dg-command {  [.[2]=10] } } */
/* { dg-output "\n\\\[null,null,10\\\]" } */

/* { dg-command {  [0,1,2,.[1]=666] } } */
/* { dg-output "\n\\\[0,666,2\\\]" } */

/* { dg-command {  [[1]][0] } } */
/* { dg-output "\n\\\[1\\\]" } */

/* { dg-command {  [2#B, 3#b] } } */
/* { dg-output "\n\\\[2#B,3#b\\\]" } */

/* { dg-command { "foo"[0] } } */
/* { dg-output "\n102UB" } */

/* { dg-command { ("foo" + "bar")[3] } } */
/* { dg-output "\n98UB" } */

/* { dg-command { try ("foo" + "bar")[6]; catch if E_out_of_bounds { print "catched\n"; } } } */
/* { dg-output "\ncatched" } */

/* { dg-command { try "foo"[-1]; catch if E_out_of_bounds { print "catched\n"; } } } */
/* { dg-output "\ncatched" } */

/* { dg-command { try "foo"[4]; catch if E_out_of_bounds { print "catched\n"; } } } */
/* { dg-output "\ncatched" } */
