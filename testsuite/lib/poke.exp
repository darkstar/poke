# poke.exp - Infrastructure for testing poke in interactive mode.

# Copyright (c) 2018 Jose E. Marchesi

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Generic poke subroutines.

if {$tool == ""} {
    send_error "`site.exp' not found, run `make site.exp'!\n"
}

# Load other libraries here:
load_lib standard.exp
load_lib dejagnu.exp

# POKE is the tool to test.  This can be set by the user on the
# command line:
# $ make check RUNTESTFLAGS=POKE=poke

global POKE
if ![info exists POKE] {
    set POKE ${objdir}/../src/poke
}

# prompt is the poke prompt to expect from the program.  As this can
# change we can put it in a variable that can be easily modified later.

if ![info exists prompt] then {
    set poke_prompt "\\(poke\\)"
}

set timeout 3

#
# poke_exit -- exit poke and cleanup
#
proc poke_exit {} {
    send "exit\n"
}


proc poke_version {} {}

proc poke_start {} {
    global POKE
    global poke_prompt
    global spawn_id

    #send_user "Executing $POKE --quiet\n"
    
    spawn $POKE --quiet
    expect {
        -re "$poke_prompt $" { }
        timeout { perror "Failed to spawn $POKE (timeout)"; exit 1 }
    }
}

proc poke_test_cmd {cmd pattern} {
    global poke_prompt
    global spawn_id
    global test

    if [string equal $pattern {}] then {
        set expected_pattern "\r\n$poke_prompt $"
    } else {
        set expected_pattern "\r\n$pattern\r\n$poke_prompt $"
    }
    

    send "$cmd\n"
    expect {
        -ex "internal compiler error" {
            fail "$test (ICE)"
        }
        -re "\[0-9\]+:\[0-9\]+: error:" {
            fail "$test (compilation error)"
        }
        -re "\[0-9\]+:\[0-9\]+: warning:" {
            fail "$test (compilation warning)"
        }

        -re $expected_pattern { pass "$test" }

        -re "$poke_prompt $" {
            fail "$test (bad match)"
        }
        
        timeout {
        fail "$test (timeout)"
        }
    }
}
