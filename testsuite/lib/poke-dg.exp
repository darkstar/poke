# poke-dg.exp - Infrastructure for testing the poke compiler.

# Copyright (C) 2019 Jose E. Marchesi

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GCC; see the file COPYING3.  If not see
# <http://www.gnu.org/licenses/>.

load_lib dg.exp

# Our own dg-* handlers
#
# Note that in all the handlers the first argument is the line number
# where the dg-* element appears in the source file.

set poke_commands {}

proc dg-command { args } {
    global poke_commands

    if { [llength $args] > 2 } {
        error "[linex $args 0]: too many arguments"
    }

    # Note this makes use of the non-portable printf %q.  If this is a
    # problem, we may need to write a little(?) tcl procedure to do
    # shell unquoting.  I would rather not do that - jemarch.
    set poke_commands \
        "$poke_commands -c [exec printf %q [lindex $args 1]]"
}

# Create a temporary data file containing the data specified as an
# argument, with a random name.  The incoming data is encoded in
# a Tcl list, like in:
#
# dg-data {0x00 0x01 0x02 0x03 0x0a 0xf3 0xb5}
#
# where list element denotes a byte.
#
# Note that it is possible for a single test to specify several
# dg-data.  Commands acting on IOS will opeate on the most recent
# dg-data.

proc dg-data { args } {
    global poke_commands

    if { [llength $args] > 2 } {
        error "[linex $args 0]: too many arguments"
    }
    set bytes [lindex $args 1]

    # Substitute RR by two random nibbles.
    # XXX

    # Append commands to open the file in poke and make it the current
    # IOS.
}

# We set LC_ALL and LANG to C so that we get the same error messages
# as expected.
setenv LC_ALL C
setenv LANG C

# The default do-what keyword
set dg-do-what-default compile

proc poke-dg-test { prog do_what extra_tool_flags } {

    global poke_commands
    global objdir
    global POKE

    switch $do_what {
        "compile" {
            catch "exec $POKE --quiet -l $prog -c exit $extra_tool_flags" comp_output
            set output_file ""
        }
        "run" {
            # This requires at least one command
            if {$poke_commands eq {}} {
                perror "$do_what: at least one dg-command is required"
                return ""
            }
            
            # Create a script in `output_file'.  DG will run it after
            # we return.
            set comp_output ""
            set output_file "${objdir}/[file rootname [file tail $prog]]"
            set fd [open $output_file w]
            puts $fd "#!/bin/bash"
            puts $fd "$POKE --quiet -l $prog $extra_tool_flags $poke_commands"
            close $fd
            file attributes $output_file -permissions a+rx
        }
        default {
            perror "$do_what: not a valid dg-do keyword"
            return ""
        }
    }

    set poke_commands {}

    return [list $comp_output $output_file]
}
