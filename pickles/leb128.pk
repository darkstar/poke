/* leb128.pk - Support for LEB128 and ULEB128 encoding.  */

/* Copyright (C) 2019 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* LEB128 or Little Endian Base 128 is a variable-length encoding for
   arbitrarily large integers.  It is used in DWARF.  */

deftype ULEB128 =
  struct
  {
    deftype ULEB_128_Byte =
      struct
      {
        byte b : b < 0x7f;
      };

    ULEB_128_Byte[] variable;
    byte last;

    defun value = uint<64>:
      {
       defvar shift = 0;
       defvar result = 0UL;
       defun extract = (byte b) byte: { return (b & 0x7f) <<. shift; }

       /* poke supports up to 64-bit integers.  */
       if (variable'length > 8)
         raise E_generic;

       for (v in variable)
         result = result | extract (v.b);
       result = extract (last);

       return result;
      }

    defun _print = void:
      {
       defvar val = 0UL;

       try val = value;
       catch
       {
         printf "#<leb128:%<warning:inv%>>";
         return;
       }

       printf ("%<leb128:#<leb128:%<integer:%u64d%>>%>",
               value);
      }
  };
