/* bson.pk - Binary JSON support for GNU poke.  */

/* Copyright (C) 2018 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/* The specification implemented here is in
   http://bsonspec.org/spec.html  */

/* Note that doubles are handled like 64-bit integers, since poke
   doesn't support FP types yet.  */

struct bson_doc; /* Forward declaration.  */

deftype bson_bool =
  enum<byte>
    {
      BSON_FALSE = 0x00,
      BSON_TRUE = 0x01
    };

deftype bson_subtype =
  enum<byte>
    {
      BSON_SUBTYPE_GENERIC = 0x00,
      BSON_SUBTYPE_FUNCTION = 0x01,
      BSON_SUBTYPE_BINARY = 0x02,
      BSON_SUBTYPE_UUID_OLD = 0x03,
      BSON_SUBTYPE_UUID = 0x04,
      BSON_SUBTYPE_MD5 = 0x05,
      BSON_SUBTYPE_USER = 0x80
    };

deftype bson_binary =
  struct
  {
    int32 size;
    bson_subtype subtype;
    byte[size] data;
  };

deftype bson_string =
  struct
  {
    int32 size;
    char[size + 1] chars : chars[size] == '\0';
  };

deftype bson_regexp =
  struct
  {
    string patterns;
    string opts;
  };

deftype bson_code_scope =
  struct
  {
    int32 size;
    bson_string code;
    bson_doc doc;
  };

deftype bson_elem =
  union
  {
    struct
    {
      byte tag = 0x02;
      string name;
      bson_string value;
    } str;

    struct
    {
      byte tag = 0x03;
      string name;
      bson_doc value;
    } doc;

    struct
    {
      byte tag = 0x04;
      string name;
      bson_doc value;
    } array;
    
    struct
    {
      byte tag = 0x05;
      string name;
      bson_binary value;
    } binary;
    
    struct
    {
      byte tag = 0x06;
      string name;
    } undefined;
    
    struct
    {
      byte tag = 0x07;
      string name;
      byte[12] value;
    } obj_id;
    
    struct
    {
      byte tag = 0x08;
      string name;
      bson_bool value;
    } boolean;
    
    struct
    {
      byte tag = 0x09;
      string name;
      int64 value;
    } datetime;
    
    struct
    {
      byte tag = 0x0a;
      string name;
    } null_elem;
    
    struct
    {
      byte tag = 0x0b;
      string name;
      bson_regexp value;
    } regexp;
    
    deprecated struct
    {
      byte tag = 0x0c;
      string name;
      bson_string;
      byte[12];
    } dbpointer;
    
    struct
    {
      byte tag = 0x0d;
      string name;
      bson_string value;
    } js;
    
    deprecated struct
    {
      byte tag = 0x0e;
      string name;
      bson_string value;
    } symbol;
    
    struct
    {
      byte tag = 0x0f;
      string name;
      bson_code_scope value;
    } js_scope;
    
    struct
    {
      byte tag = 0x10;
      string name;
      int32 value;
    } integer32;
    
    struct
    {
      byte tag = 0x11;
      string name;
      uint64 value;
    } timestamp;
    
    struct
    {
      byte tag = 0x12;
      string name;
      int64 value;
    } integer64;
    
    struct
    {
      byte tag = 0x13;
      string name;
      byte[16] value;
    } decimal128;
    
    struct
    {
      byte tag = 0xff;
      string name;
    } min_key;
    
    struct
    {
      byte tag = 0x7f;
      string name;
    } max_key;
  };

deftype bson_doc =
  struct
  {
    int32 size;
    bson_elem[] elements : (sizeof (elements)
                            + sizeof (byte) == size);
    byte endmark = 0x0;
  };

defun print_bson_elements (bson_doc doc)
{
  print ("size: " + doc.size);
  
  for (elem in doc.elements)
    if (elem is str)
      {
        print (elem.value);
      }
    else if (elem is doc)
      {
        /* ... */
      }
};

let bdoc_b = bson_doc {2, [{0xff,"foo"}, {0x7f, "bar"}],0x0UB};
let bdoc_c = bson_doc @ 0x00;

print_bson_elements (bdoc_b);
print_bson_elements (bdoc_c);

/*
Local variables:
mode:c
End:
*/
