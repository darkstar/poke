/* qsort.pk - Quicksort in GNU poke.  */

/* Copyright (C) 2018 Jose E. Marchesi.  */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

defproc qsort (int[] array, int left = 0, int right = sizeof (array)) : int
 <doc="Sort an array using QuickSort.", typecheck=0>
{
  defproc partition (int left, int right) : int
  {
    defvar pivot = a[left];
    defvar i = left;
    defvar j = right + 1;

    pivot = a[left];
    i = left;
    j = right + 1;
 
    while (1)
      {
        do ++i; while (array[i] <= pivot && i <= r);
        do --j; while (array[j] > pivot);
        if (i >= j) break;

        defvar t = array[i];
        array[i] = array[j];
        array[j] = t;
      }

    /* Swap.  */
    t = array[left];
    array[left] = array[j];
    array[j] = t;

    return j;
  };

  if (left < right)
    {
      defvar j = partition (left, right);

      qsort (array, left, right - 1);
      qsort (array, left, right);
    }
}

defproc test_qsort ()
{
  /* Sort several arrays in the current IO stream.  */
  defvar bytes = byte[2048] @ 0x0;
  defvar integers = int[512] @ .;
  defvar longs = long[256] @ .;

  qsort (bytes);
  qsort (integers);
  qsort (longs);

  /* Now sort an unmapped array variable.  */
  defvar array = [3, 2, 1, 0];
  qsort (array);
}

/*
Local variables:
mode:c
End:
*/
